function News(){}News.prototype.run=function(){var e=this;e.listenUploadFileEvent(),e.initUEditor(),e.listenSubmitEvent()},News.prototype.initUEditor=function(){window.ue=UE.getEditor("editor",{initialFrameHeight:400,serverUrl:"/ueditor/upload/"})},News.prototype.listenSubmitEvent=function(){$("#submit-btn").click(function(e){e.preventDefault();var t=$('input[name="title"]').val(),n=$('select[name="category"]').val(),o=$('input[name="desc"]').val(),a=$('input[name="thumbnail"]').val(),i=window.ue.getContent();console.log(n),myajax.post({url:"/cms/write_news/",data:{title:t,category:n,thumbnail:a,desc:o,content:i},success:function(e){200===e.code&&myalert.alertSuccess("发表成功",function(){window.location.reload()})}})})},News.prototype.listenQiniuUploadFileEvent=function(){var r=this;$("#thumbnail-btn").change(function(){var i=this.files[0];myajax.get({url:"/cms/qntoken/",success:function(e){if(200===e.code){var t=e.data.token,n=i.name.split("."),o=(new Date).getTime()+"."+n[n.length-1],a={fname:o,params:{},mimeType:["image/png","image/jpg","image/gif"]};qiniu.upload(i,o,t,a,{useCdnDomain:!0,retryCount:6,region:""}).subscribe({next:r.handleFileUploadProgress(),error:r.handleFileUploadError(),complete:r.handleFileUploadComplete()})}}})})},News.prototype.handleFileUploadProgress=function(e){var t=e.total.percent+"%";News.progressGroup.show(),News.progressBar.css({width:t}),News.progressBar.text(t)},News.prototype.handleFileUploadError=function(e){window.messageBox.showError(e.message),News.progressGroup.hide(),console.log(e.message)},News.prototype.handleFileUploadComplete=function(e){News.progressGroup.hide();var t=""+e.key;$('input[name="thumnail"]').val(t)},News.prototype.listenUploadFileEvent=function(){var n=$("#thumbnail-btn");n.change(function(){var e=n[0].files,t=new FormData;t.append("file",e[0]),myajax.post({url:"/cms/upload_file/",data:t,processData:!1,contentType:!1,success:function(e){if(200==e.code){var t=e.data.url;$("#thumbnail-form").val(t)}}})})},$(function(){(new News).run(),News.progressGroup=$("#progress-group"),News.progressBar=$(".progress-bar")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
